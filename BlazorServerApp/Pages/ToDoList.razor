@page "/todo"
@using System.Text.Json
@inject IJSRuntime JSRuntime

<PageTitle>Todo</PageTitle>

<h3>ToDoList</h3>

<ul>
    @foreach (var todo in todos)
    {
        <li class="@GetUrgencyClass(todo.Urgency)">
            <input type="checkbox" @bind="todo.IsDone" @oninput="SaveTodos" />
            <input @bind="todo.Title" />
            <select @bind="todo.Urgency" @oninput="SaveTodos">
                <option value="VeryUrgent">Dringend</option>
                <option value="NotSoUrgent">Minder dringend</option>
                <option value="ForLater">Minst dringend</option>
            </select>
            <button @onclick="() => DeleteTodo(todo)">Delete</button>
        </li>
    }
</ul>

<input placeholder="Something todo" @bind="newTodo" @oninput="SaveTodos" />
<button @onclick="AddTodo">Add todo</button>


@code {

    @inject IJSRuntime JSRuntime
    @inject Blazored.LocalStorage.ILocalStorageService localStorage


    @code {
        private List<ToDoItem> todos = new();
        private string? newTodo;

        protected override async Task OnInitializedAsync()
        {
            var savedTodos = await localStorage.GetItemAsync<List<ToDoItem>>("todos");
            if (savedTodos != null)
            {
                todos = savedTodos;
            }
        }

        private async Task SaveTodos()
        {
            await localStorage.SetItemAsync("todos", todos);
        }


        private void DeleteTodo(ToDoItem todo)
        {
            todos.Remove(todo);
            SaveTodos();
        }

       

        private void AddTodo()
        {
            if (!string.IsNullOrWhiteSpace(newTodo))
            {
                todos.Add(new ToDoItem { Title = newTodo, Urgency = Urgency.NotSoUrgent });
                newTodo = string.Empty;
                SaveTodos();
            }
        }

       
        private string GetUrgencyClass(Urgency urgency)
        {
            return urgency switch
            {
                Urgency.VeryUrgent => "urgent",
                Urgency.NotSoUrgent => "not-so-urgent",
                Urgency.ForLater => "for-later",
                _ => string.Empty,
            };
        }

    }

}
